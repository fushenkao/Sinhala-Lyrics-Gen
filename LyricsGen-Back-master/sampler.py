"""Implements function used for lyrics generation in production"""

import re
from textgenrnn import textgenrnn  # maybe avoid importing 2 times
import random


def output_cleaner(text):
    """
    Clean text generated by the multiple line generated by textgen.generate.
    Removes "^ ". Removes empty line. Clean other things TBD.
    :param text: text to clean
    :return: cleaned text
    """
    regex_patterns = []
    regex_patterns.append(("\n ", "\n"))  # space at beginning of line
    regex_patterns.append(("\n{2,}", "\n"))  # multiple newlines
    regex_patterns.append(("i ' m", "i'm"))  # i ' m -->i'm
    for (p, r) in regex_patterns:
        text = re.sub(re.compile(p), r, text)

    return text


def lyrics_generator(textgen, prefix, temperatures=[0.4, 0.5, 0.6], num_line=10, prefix_mode=2, prefix_proba=0.5):
    """
    Generate between 3 and 8 lines of strong lyrics. (number of lines is experimental)
    First line is  based on prefix. Other lines can be configured.
    :param textgen: the loaded model.
    :param prefix: begining text of first line
    :param temperatures: list of temperatures randomly used for generation.
    Put a single value in the list to make it constant
    :param num_line: number of lines to generate.
    The remaining lines will be less than this number at the end of the generation workflow.
    :param prefix_mode:
        0 use previous line + \n as prefix for next line
        1 don't use previous line as prefix. First line still uses the prefix given in argument.
        2 mode 0 with a probability of prefix_proba, else mode 1
    :param prefix_proba: proba of mode 0 to be used when in mode 2. In range 0.0-1.0
    :return: an AI generated savage rap hook
    """
    # Generate first line
    temperature = random.choice(temperatures)
    line_list = textgen.generate(prefix=prefix, return_as_list=True, n=1, temperature=temperature)

    # Manage empty prefix #FIXME to validate, maybe put elsewhere, or default to None?
    prefix = prefix if prefix else ""

    for i in range(num_line - 1):
        # Determine prefix mode if mode 2
        if prefix_mode == 2:
            prefix_mode = random.choices([0, 1], weights=[prefix_proba, 1 - prefix_proba])[0]

        # Refine prefix for next line
        if prefix_mode == 0:
            prefix = line_list[-1] + "\n"
        elif prefix_mode == 1:
            prefix = None

        # Determine temperature
        temperature = random.choice(temperatures)

        # Generate new line
        new_line = textgen.generate(prefix=prefix, return_as_list=True, n=1, temperature=temperature)[0]
        new_line = new_line.replace(prefix[:-1], '') if prefix else new_line #FIXME not sure if :-0 or :-1, put :-1 in testing function

        line_list.append(new_line)

    text = "\n".join(line_list)
    text = output_cleaner(text)

    return text






